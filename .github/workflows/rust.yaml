name: CI
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  format:
    name: Format
    runs-on: ubuntu-18.04
    env:
      SCCACHE_TAR_URL: https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz
      SCCACHE_CACHE_SIZE: "1G"
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: rustfmt
          toolchain: nightly-2021-06-16
          default: true
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  build_and_test:
    name: Build and Test
    runs-on: ubuntu-18.04
    env:
      SCCACHE_TAR_URL: https://github.com/mozilla/sccache/releases/download/v0.2.15/sccache-v0.2.15-x86_64-unknown-linux-musl.tar.gz
      SCCACHE_CACHE_SIZE: "1G"
    steps:
      - uses: actions/checkout@v2
      - name: Setup environment variables for subsequent steps
        run: |
          echo "$HOME/.local/bin/" >> $GITHUB_PATH
          echo "SCCACHE=$HOME/.local/bin/sccache" >> $GITHUB_ENV
      - uses: actions/cache@v2
        id: cache-sccache
        with:
          path: |
            ${{ env.SCCACHE }}
          key: ${{ runner.os }}-sccache-${{ env.SCCACHE_TAR_URL }}
      - uses: actions/cache@v2
        id: cache-cargo
        with:
          # The paths are taken from
          # https://doc.rust-lang.org/nightly/cargo/guide/cargo-home.html#caching-the-cargo-home-in-ci
          path: |
            ~/.cargo/bin
            ~/.cargo/registry/index
            ~/.cargo/registry/cache
            ~/.cargo/git/db
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-cargo-
      - uses: actions/cache@v2
        id: cache-sccache-local-disk
        with:
          path: |
            ~/.cache/sccache
          key: ${{ runner.os }}-sccache-local-disk-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache-local-disk-${{ hashFiles('**/Cargo.lock') }}
            ${{ runner.os }}-sccache-local-disk
      - name: Install sccache
        if: steps.cache-sccache.outputs.cache-hit != 'true'
        id: install-sccache
        run: |
          curl -LsSf ${SCCACHE_TAR_URL} > /tmp/sccache.tar.gz
          mkdir -p $(dirname $SCCACHE)
          tar axvf /tmp/sccache.tar.gz --strip-components=1 -C $(dirname $SCCACHE) --wildcards --no-anchored 'sccache'
          chmod +x ${SCCACHE}
          sccache --version
          sccache -s
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          target: wasm32-unknown-unknown
          toolchain: nightly-2021-06-16
          default: true
      - uses: actions-rs/cargo@v1
        env:
          RUSTC_WRAPPER: ${{ env.SCCACHE }}
          # disable incremental compilation to increase sccache hit rate
          CARGO_INCREMENTAL: "0"
        with:
          command: build
          args: --workspace
      - name: Check sccache status
        run: sccache -s
      - uses: actions-rs/cargo@v1
        env:
          RUSTC_WRAPPER: ${{ env.SCCACHE }}
          # disable incremental compilation to increase sccache hit rate
          CARGO_INCREMENTAL: "0"
        with:
          command: test
          args: --workspace
      - name: Check sccache status
        run: sccache -s

  clippy:
    name: Clippy
    runs-on: ubuntu-18.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          components: clippy
          target: wasm32-unknown-unknown
          toolchain: nightly-2021-06-16
          default: true
      - uses: actions-rs/cargo@v1
        continue-on-error: true
        with:
          command: clippy
          args: --workspace -- -D warnings